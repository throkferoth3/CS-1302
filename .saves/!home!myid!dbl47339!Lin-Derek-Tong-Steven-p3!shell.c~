#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <string.h>

/**
 * This function takes a command and runs it on a child.
 * It support input and output redirection.
 * < redirects input. > redirects output. >> appends output.
 * 
 * @param argc The number of arguments.
 * @param arvg[] Char array that holds the arguments.
 * @return The exit status.
 */
int main (int argc, char* argv[]) {
    setbuf(stdout, NULL);
	char* progname = argv[1];
	pid_t pid;

	if (argc > 1) {
		if ((pid = fork()) < 0) {
            write(STDERR_FILENO, "Fork Error", strlen("Fork Error"));
            exit(EXIT_FAILURE);
        } else if (pid == 0) {	// child process
			int i = 0;
            
            for (i = 2; i < argc; i++) {
                if (strcmp(argv[i], "<") == 0) {
                    int j = i;
                    for (j = i; j < argc; j++) argv[j] = argv[j + 1];
                    int fdi = open(argv[i], O_RDONLY);                    
                    if (fdi == -1) {
                        write(STDERR_FILENO, "-bash: ", strlen("-bash: "));
                        write(STDERR_FILENO, argv[i], strlen(argv[i]));
                        write(STDERR_FILENO, ": No such file or directory",
                        strlen(": No such file or directory"));
                        exit(EXIT_FAILURE);
                    }
                    if (dup2(fdi, STDIN_FILENO) == -1) {
                        write(STDERR_FILENO, "dup2 error", strlen("dup2 error"));
                        exit(EXIT_FAILURE);
                    }
                } else if ((strcmp(argv[i], ">") == 0)) {
                    int j = i;
                    for (j = i; j < argc; j++) argv[j] = argv[j + 1];
                    int fdi = open(argv[i], O_WRONLY | O_CREAT | O_TRUNC, 0644);
                    if (fdi == -1) {
                        write(STDERR_FILENO, "output error ", strlen("output error "));
                        write(STDERR_FILENO, argv[i], strlen(argv[i]));
                        exit(EXIT_FAILURE);
                    }
                    if (dup2(fdi, STDOUT_FILENO) == -1) {
                        write(STDERR_FILENO, "dup2 error", strlen("dup2 error"));
                        exit(EXIT_FAILURE);
                    }                
                } else if ((strcmp(argv[i], ">>") == 0)) {
                    int j = i;
                    for (j = i; j < argc; j++) argv[j] = argv[j + 1];
                    int fdi = open(argv[i], O_WRONLY | O_CREAT | O_APPEND, 0644);
                    if (fdi == -1) {
                        write(STDERR_FILENO, "append error ", strlen("append error "));
                        write(STDERR_FILENO, argv[i], strlen(argv[i]));
                        exit(EXIT_FAILURE);
                    }
                    if (dup2(fdi, STDOUT_FILENO) == -1) {
                        write(STDERR_FILENO, "dup2 error", strlen("dup2 error"));
                        exit(EXIT_FAILURE);
                    }
                }
            }
                
            if (execvp(progname, argv + 1) == -1) {
                write(STDERR_FILENO, argv[0], strlen(argv[0]));
                perror(" error");
                exit(EXIT_FAILURE);
            }
        } else {		// parent process
            int status;
            wait(&status);
            if (!WIFEXITED(status)) {
                write(STDERR_FILENO, "child termination error", strlen("child termination error"));
                exit(EXIT_FAILURE);
            }
        } // if

    } else {
        write(STDERR_FILENO, "please specify the name of the program as a command line argument\n"
        , strlen("please specify the name of the program as a command line argument\n"));
        return EXIT_FAILURE;
    } // if

} // main
